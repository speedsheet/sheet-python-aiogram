# <#>aiogram<><> SpeedSheet
<b>Find it faster.<>

This is an interactive <b>aiogram<> cheat sheet. aiogram is a Python asynchronous library for communicating with Telegram (uses aiohttp under the hood). Use the search to instantly get answers.


<table><col><b>Basics<>

<*><link "?q=install-only">Install<><>

<*><link "?q=bot-commands">Bot Commands<>
<link "?q=send-commands">Send Commands<>
<link "?q=reply-commands">Reply Commands<>
<link "?q=parsemode-only">Parse Mode<><>

<*><link "?q=message-properties">Message Properties<>
<link "?q=user-properties">User Properties<><><><col>	<><col><b>Reference<>

<*><link "?q=online-docs">Online Document<>
<link "?q=telegram-apis">Telegram APIs<>
<link "?q=terms-only">Terms<><>


<b>Related Sheets<>

<*><link "aiohttp">aiohttp<>
<link "python">Python<>
<link "telegram">Telegram<><><><>


# Online Documents
@
@ online-docs-only, docs-only


### Official Site / Github
<l>https://github.com/aiogram/aiogram<>


### Telegram SpeedSheet
<l>telegram<>


### Examples:

Github Examples:
<l>https://github.com/aiogram/aiogram/tree/dev-2.x/examples<>



# Library


### Install Library - pip

<cb>pip install aiogram<>
@
@ command, commandline, install-only



### Install Library - pip requirements.txt

requirements.txt:

<cb>aiogram<>


Command:

<cb>pip install -r requiremets.txt<>
@
@ command, commandline, install-only



### Program - Import

<cb>import aiogram<>



# Bot Commands
@
@ bot-only, bot-commands-only


### Bot - Connect / Start

<cb>= Bot(token = <v>BOT_TOKEN<>)<>

Full Usage:

<cb>from aiogram import Bot

<v>bot<> = Bot(token = <v>BOT_TOKEN<>, parse_mode = ParseMode.HTML)<>


Creates a connection to a bot.



### Bot - Close

<cb>await <v>bot<>.close()<>


Closes the connection to a bot.
@
@ .close(), end, exit



### Bot - Get Bot Info

<cb>= <v>bot_1<>.get_me()<>


Returns: <c>aiogram.types.user.User<>


Returns the user object for bot 1.


Example:

<cb><v>bot_user<> = <v>bot_1<>.get_me()

print("My name is", <v>bot_1<>.first_name)
print("My id is", <v>bot_1<>.id)<>



### Bot - Poll For All Messages

<cb><v>dispatcher<>.register_message_handler(<v>handle_message<>)<>

<cb>from aiogram import Dispatcher


async def <v>handle_message<>(message):
	<#># Check message.text.<>
	<v>...<>


<v>dispatcher<> = Dispatcher(<v>bot_1<>)
<v>dispatcher<>.register_message_handler(<v>handle_message<>)
await <v>dispatcher<>.start_polling()<>


Listens to all messages on bot channels.

To poll for all messages, pass a callback handler to register_message_handler().



### Bot - Poll For Commands

<cb><v>dispatcher<>.register_message_handler(
		<v>process_message<>,
		commands {'<v>command_1<>', '<v>command_2<>', <v>...<>}<>

<cb>from aiogram import Dispatcher


async def <v>process_message<>(message):
	<#># Check message.text for command.<>
	<v>...<>


<v>dispatcher<> = Dispatcher(<v>bot_1<>)
<v>dispatcher<>.register_message_handler(
		<v>process_message<>,
		commands {'<v>command_1<>', '<v>command_2<>', <v>...<>}
await <v>dispatcher<>.start_polling()<>


Handles incoming bot commands (Something that leads with a '/').

Register a callback function with a list of trigger commands to register_message_handler().


Example:

<cb>from aiogram import Dispatcher


async def <v>process_message<>(message):
	if message.text = '/start':
		message.answer('Starting.')
	else:
		message.answer('Stopping.')


<v>dispatcher<> = Dispatcher(<v>bot_1<>)
<v>dispatcher<>.register_message_handler(
		<v>process_message<>,
		commands {'<v>start<>', '<v>stop<>'}
await <v>dispatcher<>.start_polling()<>



# Message - Send Commands
@
@ send-only, send-message-only, message-send-only, send-command-only, send-commands-only
@ new, create


### Message - Send Text

<cb>= await <v>bot_1<>.send_message(<v>user_id<>, <v>message<>)<>

Send In Default Format:

<cb>await <v>bot_1<>.send_message(<v>user_id<>, <v>message<>)<>

Set Format Type:

<cb>from aiogram.types import ParseMode

await <v>bot_1<>.send_message(<v>user_id<>, <v>message<>, parse_mode=types.ParseMode.<v>mode<>)<>

Capture Details:

<cb><v>message<> = await <v>bot_1<>.send_message(<v>user_id<>, <v>message<>)<>

Returns: <c>aiogram.types.message.Message<>


Sends a message to a user or group.


Example:

<cb>await <v>bot_1<>.send_message(1234, "<v>Test message.<>", parse_mode = ParseMode.HTML)<>
@
@ bot.send_message(), .send_message()



### Message - Send Audio

<cb>= <v>await bot<>.send_audio(<v>user_id<>, <v>file<>)<>

Send Audio:

<cb>with open(<v>audio_file_path<>, 'rb') as <v>file<>:
	<v>await bot<>.send_audio(<v>user_id<>, <v>file<>)<>

Send With Caption:

<cb>await <v>bot_1<>.send_audio(<v>user_id<>, <v>file<>, '<v>caption<>')<>

Get Result:

<cb><v>message<> = await <v>bot_1<>.send_audio(<v>user_id<>, <v>message<>)<>

Returns: <c>aiogram.types.message.Message<>


Sends an audio file to a user or group.
@
@ bot.send_audio(), .send_audio()



### Message - Send Image

<cb><v>await bot<>.send_photo(<v>user_id<>, <v>file<>)<>

Send Image:

<cb>with open(<v>photo_file_path<>, 'rb') as <v>file<>:
	<v>await bot<>.send_photo(<v>user_id<>, <v>file<>)<>

Send With Caption:

<cb>await <v>bot_1<>.send_photo(<v>user_id<>, <v>file<>, '<v>caption<>')<>

Get Result:

<cb><v>message<> = await <v>bot_1<>.send_photo(<v>user_id<>, <v>message<>)<>

Returns: <c>aiogram.types.message.Message<>


Sends a picture to a user or group.

Will not work for animated image types.
@
@ bot.send_photo(), .send_photo(), photo



### Message - Send Animated Image / GIF

<cb><v>await bot<>.send_animation(<v>user_id<>, <v>file<>)<>

Send Animated Image:

<cb>with open(<v>photo_file_path<>, 'rb') as <v>file<>:
	<v>await bot<>.send_animation(<v>user_id<>, <v>file<>)<>

Send With Caption:

<cb>await <v>bot_1<>.send_animation(<v>user_id<>, <v>file<>, '<v>caption<>')<>

Get Result:

<cb><v>message<> = await <v>bot_1<>.send_animation(<v>user_id<>, <v>message<>)<>

Returns: <c>aiogram.types.message.Message<>


Sends an animated image to the user or group.
@
@ bot.send_animation(), .send_animation(), .gif



# Message - Reply Commands
@
@ message-only, reply-only, message-reply-only, reply-message
@ reply-command-only, reply-commands-only


### Message - Reply

<cb>await <v>message_1<>.answer(<v>reply_message<>)<>

Set Format Type:

<cb>from aiogram.types import ParseMode

await await <v>message_1<>.answer(<v>reply_message<>, parse_mode=types.ParseMode.<v>mode<>)<>


Responds to message but doesn't include original request.
@
@ message.answer(), .answer()



### Message - Reply / Quote Original

<cb>await <v>message_1<>.reply(<v>reply_message<>)<>

Set Format Type:

<cb>from aiogram.types import ParseMode

await await <v>message_1<>.reply(<v>reply_message<>, parse_mode=types.ParseMode.<v>mode<>)<>


Responds to message displaying a copy of the original request.
@
@ message.reply(), .reply(), 



### Message - Reply With Audio

<cb>with open(<v>audio_file_path<>, 'rb') as <v>file<>:
	await <v>message_1<>.answer_audio(<v>file<>)<>


Responds to message but doesn't include original request.
@
@ message.answer_audio(), .answer_audio()



### Message - Reply With Audio / Quote Original

<cb>with open(<v>audio_file_path<>, 'rb') as <v>file<>:
	await <v>message_1<>.reply_audio(<v>file<>)<>


Responds to message displaying a copy of the original request.
@
@ message.reply_audio(), .reply_audio()



### Message - Reply With Photo

<cb>with open(<v>phot_file_path<>, 'rb') as <v>file<>:
	await <v>message_1<>.answer_photo(<v>file<>)<>


Responds to message but doesn't include original request.
@
@ message.answer_photo(), .answer_photo()



### Message - Reply With Photo / Quote Original

<cb>with open(<v>photo_file_path<>, 'rb') as <v>file<>:
	await <v>message_1<>.reply_photo(<v>file<>)<>


Responds to message displaying a copy of the original request.
@
@ message.reply_photo(), .reply_photo()



### Message - Reply With Animated Gif

<cb>with open(<v>phot_file_path<>, 'rb') as <v>file<>:
	await <v>message_1<>.answer_animation(<v>file<>)<>


Responds to message but doesn't include original request.
@
@ message.answer_animation(), .answer_animation(), .gif



### Message - Reply With Animated Gif / Quote Original

<cb>with open(<v>photo_file_path<>, 'rb') as <v>file<>:
	await <v>message_1<>.reply_animation(<v>file<>)<>


Responds to message displaying a copy of the original request.
@
@ message.reply_animation(), .reply_animation(), .gif



### Call - Handle Error

<cb>from aiogram.utils.exceptions import *


try:

	await <v>bot_1<>.<v>command<>()

except RetryAfter as e:

	<#># Flood limit is exceeded. Sleep {e.timeout} seconds.<>

	await asyncio.sleep(e.timeout)

	await <v>bot_1<>.<v>command<>()	<#># Retry<>

except BotBlocked:

	<#># Blocked by User<>

except ChatNotFound:

	<#># Invalid User ID<>

except UserDeactivated:

	<#># User is Deactivated<>

except TelegramAPIError:

	<#># API Failed<><>
@
@ try except, timeout
@ exception.retryafter, retryafter
@ exception.botblocked, botblocked
@ exception.chatnotfound, chatnotfound
@ exception.userdeactivated, userdeactivated
@ exception.telegramapierror, telegramapierror


# Message - Properties
@
@ message-properties-only, property-only, properties-only


### Message - Get Message ID

<cb>= <v>message_1<>.message_id<>


Returns: <c>int<>



### Message - Get Chat ID

<cb>= <v>message_1<>.chat.id<>


Returns: <c>int<>



### Message - Get Sent Time

<cb>= <v>message_1<>.date<>


Returns Unix Time / Epoch Time
(Number of seconds from 1970-01-01)



### Message - Get Text

<cb>= <v>message_1<>.text<>
@
@ body, contents



### Message - From User

<cb>= <v>message_1<>.from_user<>


Returns: User Data (dict?)



### Message - From User Name

<cb>= <v>message_1<>.from_user.first_name<>

<cb>= <v>message_1<>.from_user.last_name<>



### Message - From User ID

<cb>= <v>message_1<>.from_user.id<>


Returns: <c>int<>



### Message - From User - Is Bot?

<cb>= <v>message_1<>.from_user.is_bot<>



# User Properties
@
@ user-property-only, user-properties-only, property-only, properties-only


### User - Import

Class:

<cb>aiogram.types.user.User<>

Import:

<cb>from aiogram.types.user import User<>



### User - ID

<cb>= <v>user_1<>.id<>


Returns: <c>int<>



### User - Name

<cb>= <v>user_1<>.first_name<>

<cb>= <v>user_1<>.last_name<>

For Bot (First Name Only):

<cb>= <v>user_1<>.first_name<>



### User - Is a Bot?

<cb>= <v>user_1<>.is_bot<>



### User - User Name

<cb>= <v>user_1<>.username<>
@
@ username, user_name



# ParseMode
@
@ parse mode, parsemode-only



### ParseMode - Import


Class:

<cb>aiogram.types.ParseMode<>

Import:

<cb>from aiogram.types import ParseMode<>



### ParseMode - Set Default

Set when starting your bot.



### ParseMode - HTML

<cb>from aiogram import type

= type.parse.HTML<>


See Telagram Formats:

<card><l "/s/telegram?search=format+ref&select=FdBE">Telegram SpeedSheet - HTML Format Reference<><>



### ParseMode - MARKDOWN

<cb>from aiogram import type

= type.parse.MARKDOWN<>


See Telagram Formats:

<card><l "/s/telegram?search=format+ref&select=F3XC">Telegram SpeedSheet - Markdown Format Reference<><>



### ParseMode - MARKDOWN_V2

<cb>from aiogram import type

= type.parse.MARKDOWN_V2<>


See Telagram Formats:

<card><l "/s/telegram?search=format+ref&select=F3XC">Telegram SpeedSheet - Markdown Format Reference<><>



# Reference - Telegram APIs
@
@ online-docs-only, docs-only, telegram-apis-only


### Telegram - APIs

<card><l>https://core.telegram.org/api<><>



### Telegram - APIS - Bot

<card><l>https://core.telegram.org/bots/api#available-types<><>



### Telegram - Help - Bots

<cb><l>https://core.telegram.org/bots<><>



# Terms
@
@ terms-only


### User ID

The integer id that identifies a user.



